<project name="OpenRocket" basedir="." default="package">

    <!-- CLEAN -->

        <target name="clean" depends="clean-core, clean-swing">
	  <delete dir="OpenRocket" />
	  <delete file="OpenRocket.AppImage" />
	</target>

	<target name="clean-core">
		<ant dir="core" target="clean"/>
	</target>

	<target name="clean-swing">
		<ant dir="swing" target="clean"/>
	</target>


    <!-- BUILD -->

	<target name="build" depends="build-core, build-swing">
	</target>

	<target name="build-core">
		<ant dir="core" target="build"/>
	</target>
	
	<target name="build-swing" depends="jar-core">
		<ant dir="swing" target="build"/>
	</target>

    <!-- JAR -->
	
	<target name="jar" depends="jar-core,jar-swing">
	</target>
	
	<target name="jar-core" depends="build-core">
		<ant dir="core" target="jar"/>
	</target>
	
	<target name="jar-swing" depends="build-swing">
		<ant dir="swing" target="jar"/>
	</target>

    <!-- PACKAGE -->
    <target name="package" depends="pkg-2">
    </target>
    
    <target name="check-os" depends="jar">
      <condition property="type" value="app-image">
	<os name="linux" />
      </condition>
      
      <condition property="isLinux">
	<os name="linux" />
      </condition>
      
      <condition property="type" value="dmg">
	<os name="macos" />
      </condition>
      
      <condition property="type" value="exe">
	<os family="windows" />
      </condition>
    </target>
    
    <target name="pkg-1" depends="check-os" >
      <sequential>
	<delete dir="OpenRocket" />
	<exec executable="jpackage">
	  <arg line="--input swing/build/jar" />
	  <arg line="--main-jar OpenRocket.jar" />
	  <arg line="--type ${type}" />
	  <arg line="--app-version 22.xx-BETA" />
	  <arg value="--copyright" />
	  <arg value="Copyright (C) 2007-2022 Sampo Niskanen and others" />
	  <arg value="--description" />
	  <arg value="Rocket Design and Simulation Program" />
	  <arg line="--name OpenRocket" />
	  <arg value="--verbose" />
	  <arg line="--icon package-resources/openrocket.png" />
	</exec>
      </sequential>
    </target>

    <target name="appimage-check" depends="check-os" >
      <echo message="checking appimagetool.AppImage" />
      <exec executable="appimagetool.AppImage"
	    resultproperty="appReturn" failifexecutionfails="false">
	<arg value="--version"/>
      </exec>
      <condition property="appimage-failed" value="true">
	<not>
	  <equals arg1="0" arg2="${appReturn}" />
	</not>
      </condition>
      <fail if="${appimage-failed}" message="
appimagetool.AppImage executable failed ${line.separator}
To build the Linux appimage, you will need to ${line.separator}

download the correct appimagetool for your architecture
from https://appimage.github.io/appimagetool/, ${line.separator}

rename it appimagetool.AppImage, ${line.separator}

make it executable, and ${line.separator}

put it in a directory in your command execution path"
	    />
    </target>

    <target name="pkg-2" depends="appimage-check, pkg-1" if="isLinux" >
      <sequential>
	<exec executable="cp">
	  <arg line="LICENSE.TXT package-resources/AppRun package-resources/openrocket.desktop package-resources/openrocket.png OpenRocket" />
	</exec>
	<exec executable="appimagetool.AppImage">
	  <arg value="OpenRocket" />
	  <arg value="OpenRocket.AppImage" />
	</exec>
	<delete dir="OpenRocket" />
      </sequential>
    </target>
    
    <!-- TEST -->
	
	<target name="unittest" depends="unittest-core, unittest-swing">
	</target>
	
	<target name="unittest-core" depends="jar-core">
		<ant dir="core" target="unittest" inheritAll="false" />
	</target>
	
	<target name="unittest-swing" depends="jar-swing">
		<ant dir="swing" target="unittest" inheritAll="false" />
	</target>

    <!-- CHECK -->
    <target name="check" depends="checktodo,checkascii"/>

    <!-- CHECK TODOs -->
    <target name="todo" depends="checktodo"/>
    <target name="checktodo">
        <tempfile property="todo.file" prefix="checktodo-" destDir="${basedir}"/>
        <echo>Checking project for FIXMEs.</echo>
        <concat destfile="${todo.file}">
            <fileset dir="core/src">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="core/test">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="swing/src">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="swing/test">
                <include name="**/*.java"/>
            </fileset>
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="(FIXME|TODO:.*CRITICAL)"/>
                </linecontainsregexp>
            </filterchain>
        </concat>
        <loadfile srcfile="${todo.file}" property="criticaltodos"/>
        <delete file="${todo.file}"/>
        <fail if="criticaltodos">CRITICAL TODOs exist in project:
${criticaltodos}</fail>
        <echo>No critical TODOs in project.</echo>
    </target>

    <!-- CHECK ASCII -->
    <target name="ascii" depends="checkascii"/>
    <target name="checkascii">
        <tempfile property="ascii.file" prefix="checkascii-" destDir="${basedir}"/>
        <echo>Checking project for non-ASCII characters.</echo>
        <concat destfile="${ascii.file}">
            <fileset dir="core/src">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="core/test">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="swing/src">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="swing/test">
                <include name="**/*.java"/>
            </fileset>
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="\P{ASCII}"/>
                </linecontainsregexp>
            </filterchain>
        </concat>
        <loadfile srcfile="${ascii.file}" property="nonascii"/>
        <delete file="${ascii.file}"/>
        <fail if="nonascii">Non-ASCII characters exist in project:
${nonascii}</fail>
        <echo>No non-ASCII characters in project.</echo>
    </target>

</project>
