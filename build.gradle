plugins {
    id 'com.gradleup.shadow' version '9.2.2'
    id 'java'
    id 'checkstyle'
    id 'org.javamodularity.moduleplugin' version '2.0.0'
    id 'application'
    id 'jacoco'
}

// Java settings
java {
    // Must be disabled in order to use the gradle-modules-plugin
    modularity.inferModulePath = false
}

application {
    mainModule = 'info.openrocket.swing'
    mainClass = 'info.openrocket.swing.startup.OpenRocket'

    /*applicationDefaultJvmArgs = [
            // Use the system appearance on macOS for the FlatLaf title bar
            '-Dapple.awt.application.appearance=system',
            // Fix JOGL 3D importing on Windows
            '--add-exports',
            'java.base/java.lang=ALL-UNNAMED',
            '--add-exports',
            'java.desktop/sun.awt=ALL-UNNAMED',
            '--add-exports',
            'java.desktop/sun.java2d=ALL-UNNAMED',
            // Fix Windows window ghosting (issue #1667),
            '-Dsun.java2d.noddraw=true',
            '-Dsun.java2d.d3d=false',
            '-Dsun.java2d.ddforcevram=true',
            '-Dsun.java2d.ddblit=false',
            '-Dswing.useflipBufferStrategy=True'
    ]*/
}

// Fetch the build version from the build.properties file
def buildProperties = new Properties()
file('core/src/main/resources/build.properties').withInputStream { buildProperties.load(it) }
group = 'info.openrocket'
version = buildProperties['build.version']

def baseManifestAttributes = [
        'Description'          : 'Model-rocketry aerodynamics and trajectory simulation software',
        'SplashScreen-Image'   : 'pix/splashscreen.png',
        'Implementation-Version': buildProperties['build.version'],
        'Implementation-Vendor': 'OpenRocket',
        'Implementation-Vendor-Id': 'info.openrocket',
        'Implementation-URL'   : 'https://openrocket.info/',
]

// JaCoCo configuration
jacoco {
    toolVersion = "0.8.11"
}

// Common project configuration
allprojects {
    repositories {
        mavenCentral()
        maven { url = "https://jitpack.io" }
        maven { url = "https://jogamp.org/deployment/maven/" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: "org.javamodularity.moduleplugin"
    apply plugin: 'jacoco'

    // Configure the gradle-modules-plugin
    modularity {
        standardJavaRelease(17) // For targeting Java 17
        modularity.patchModule("java.scripting", "script-api-1.0.jar")
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport

        testLogging {
            events 'PASSED', 'FAILED', 'SKIPPED', 'STANDARD_OUT'
            exceptionFormat = 'full'
            showStackTraces = true
            stackTraceFilters = []
        }
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            html.required = true
            csv.required = false
        }
    }

    // Always evaluate coverage as part of the verification lifecycle
    tasks.named('check') {
        dependsOn jacocoTestCoverageVerification
    }

    // Common dependencies
    dependencies {
        implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'

        testImplementation 'org.junit.platform:junit-platform-runner:1.10.2'
        testImplementation 'org.junit.platform:junit-platform-launcher:1.10.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.0'
        testImplementation 'org.mockito:mockito-core:5.10.0'
        testImplementation 'org.mockito:mockito-junit-jupiter:5.10.0'
    }
}

tasks.named('check') {
    dependsOn(subprojects.collect { it.tasks.named('check') })
}

//tasks.register('serializeEngines') {
//    dependsOn ':core:serializeEngines'
//}

// JAR config
jar {
    archiveBaseName.set('OpenRocket')

    manifest {
        attributes(baseManifestAttributes)
    }
}

// Project dependencies
dependencies {
    implementation(project(path: ":core", configuration: "default"))
    implementation(project(path: ":swing", configuration: "default"))
}

shadowJar {
    dependsOn(':core:processResources')
    archiveBaseName.set('OpenRocket')
    archiveVersion.set(buildProperties['build.version'])
    archiveClassifier.set('')
    dependsOn(distTar, distZip)

    manifest {
        attributes(baseManifestAttributes)
        attributes(
                'Add-Exports': 'java.base/java.lang=ALL-UNNAMED java.desktop/sun.awt=ALL-UNNAMED java.desktop/sun.java2d=ALL-UNNAMED',
                'JVM-Args': '-Dapple.awt.application.appearance=system -Dsun.java2d.noddraw=true -Dsun.java2d.d3d=false -Dsun.java2d.ddforcevram=true -Dsun.java2d.ddblit=false -Dswing.useflipBufferStrategy=True'
        )
    }
}

// jacoco aggregate report for all subprojects
tasks.register('jacocoRootReport', JacocoReport) {
    group = 'verification'
    description = 'Generates an aggregate report from all subprojects'

    dependsOn(tasks.named('test'))
    dependsOn(subprojects.jacocoTestReport)

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    // Collect execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Collect class directories from all subprojects
    classDirectories.setFrom(subprojects.sourceSets.main.output.classesDirs)
}

// Package the application for distribution.
tasks.register('dist') {
    group = 'info.openrocket'
    dependsOn 'check', 'shadowJar'
    doLast {
        println "Completed the deployable jar in './build/libs"
    }
}
